//The code has been made open source and is never to be sold.
//Owner: Jacob Donley
//Email: JacobD_10@hotmail.com
//This header should never be removed from this code.

#include <FastSPI_LED.h>

#define NUM_LEDS 128

// Sometimes chipsets wire in a backwards sort of way
struct CRGB { unsigned char g; unsigned char r; unsigned char b; };
struct CRGB *leds;

#define PIN 8  //Lighting Serial Pin

#define LOG_OUT 1 // use the log output function
#define FHT_N 16 // set to 256 point fht

#include <FHT.h> // include the library
  
//  int matrix[8][16]={{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0},{1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0},{1,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1},{1,0,1,1,1,1,0,0,1,0,1,1,0,1,1,0},{1,0,0,1,1,0,1,1,0,1,0,1,0,0,1,1}};

//  int matrix[8][16]={{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0},{1,0,0,1,0,1,0,1,1,0,0,1,0,0,1,0},{1,0,0,0,1,0,0,1,0,1,0,1,0,1,1,1},{1,1,1,0,1,0,0,1,1,0,0,1,0,1,0,1}};

  // SAW TOOTH
//  int matrix[8][16]={{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1},{0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1},{1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0},{1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1},{1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1},{1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1}};

  //FILLED RECTANGLE
//  int matrix[8][16]={{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255}};
    
  //OUTLINE RECTANGLE
//  int matrix[8][16]={{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
  
  //SCATTERED RECTANGLE
//  int matrix[8][16]={{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0},{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},{1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0},{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},{1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0},{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1}};
 
  //PHIL
//  int matrix[8][16]={{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,1,1,1,0,0,1,0,0,0,0,1,0,1,0,0},{1,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0},{1,0,0,0,1,0,1,1,1,0,0,1,0,1,0,0},{1,1,1,1,0,0,1,0,0,1,0,1,0,1,0,0},{1,0,0,0,0,0,1,0,0,1,0,1,0,1,0,0},{1,0,0,0,0,0,1,0,0,1,0,1,0,1,0,0}};
    
     //SPECTROMETER
//int matrix[8][16]={{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0},{0,0,0,0,1,1,1,0,1,0,0,1,1,1,0,1},{0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};

  //WAVE MATRIX
int matrix[8][16]={{255,127,031,000,000,000,000,000,000,000,000,000,000,000,031,127},{255,255,127,063,000,000,000,000,000,000,000,000,000,063,127,255},{127,127,255,255,127,000,000,000,000,000,000,000,127,255,255,127},{000,000,063,255,255,063,000,000,000,000,000,063,255,255,063,000},{000,000,000,063,255,255,063,000,000,000,063,255,255,063,000,000},{000,000,000,000,127,255,255,127,063,127,255,255,127,000,000,000},{000,000,000,000,000,063,127,255,255,255,127,063,000,000,000,000},{000,000,000,000,000,000,031,127,255,127,031,000,000,000,000,000}};

  //FILLED WAVE MATRIX
//int matrix[8][16]={{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1},{1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1},{1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1},{1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1},{1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};

  //HILL MATRIX
//int matrix[8][16]={{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0},{0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0},{0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0},{0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0},{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};

  //ADAM MATRIX
//int matrix[8][16]={{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,1,0,1,1,1,0,0,1,1,0,0,0,0},{1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0},{1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0},{1,0,0,0,1,1,1,1,0,1,0,0,1,0,0,0}};

  //STEVE MATRIX
//int matrix[8][16]={{0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},{0,1,1,1,0,1,0,1,1,1,0,0,0,1,1,1},{0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0},{1,0,0,0,1,1,0,1,1,0,1,0,1,1,1,0},{0,1,1,1,0,1,0,1,0,0,1,0,1,1,0,0},{0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1}};

  //ALLY MATRIX
//int matrix[8][16]={{000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000},{000,000,255,100,255,000,000,000,255,000,255,000,255,000,000,255},{000,050,255,000,255,050,000,000,255,000,255,000,255,000,000,255},{000,255,000,000,000,255,000,000,255,000,255,000,255,050,025,255},{050,255,255,255,255,255,050,000,255,000,255,000,000,255,255,255},{100,050,000,000,000,050,100,000,255,000,255,000,000,000,000,255},{255,000,000,000,000,000,255,000,255,000,255,000,100,000,000,255},{255,000,000,000,000,000,255,000,000,050,000,050,000,255,255,000}};

  //TIM MATRIX
//int matrix[8][16]={{100,255,255,255,255,000,000,000,000,000,000,000,000,000,000,000},{000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000},{000,000,255,000,000,255,000,000,000,000,000,000,000,000,000,000},{000,000,255,000,000,000,000,000,255,000,255,000,255,255,000,000},{000,000,255,000,000,255,000,000,255,255,000,255,000,000,255,000},{000,000,255,000,000,255,000,000,255,000,000,255,000,000,255,000},{000,000,000,050,000,255,000,000,255,000,000,255,000,000,255,000},{000,000,000,000,000,000,050,000,255,000,000,255,000,000,255,000}};

  //BLANK MATRIX
//int matrix[8][16]={
//{000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000},
//{000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000},
//{000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000},
//{000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000},
//{000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000},
//{000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000},
//{000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000},
//{000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000}};
 
   int shiftY=0;
   int shiftX=0;
   double matrixItem;
   int ledIndex;
   int Brightness = 255; //Minimum Brightness = 0, Maximum Brightness = 255, For older Style Matrices make this = Brightness*254
 
   int R=0;
   int G=0;
   int B=255;
   
   int tempR=0;
   int tempG=0;
   int tempB=255;
   
   int changeInterval = 1;
   int colourChange =1;
   
   int sweepCountDelay[2]={0,0};
   int sweepSpeed[2]={
                       3  //Horizontal Sweep Speed
                      ,10  //Vertical Sweep Speed
                    };
                    
   int invertMatrix=0;    // 0 is normal, 1 inverts matrix
   
   int colourFlowDirection=1;  //  1 = Horizontal Movement
                               // 14 = Diagonal Movement Right Short
                               // 15 = Diagonal Movement Right Long
                               // 16 = Vertical Movement
                               // 17 = Diagonal Movement Left Long
                               // 18 = Diagonal Movement Left Short
void setup()
{
  FastSPI_LED.setLeds(NUM_LEDS);
  FastSPI_LED.setChipset(CFastSPI_LED::SPI_WS2811);

  FastSPI_LED.setPin(PIN);
  
  FastSPI_LED.init();
  FastSPI_LED.start();

  leds = (struct CRGB*)FastSPI_LED.getRGBData(); 

}

void loop() {
  
sweepMatrixHrz(); 
//sweepMatrixVrt();
    //analogRead(A0);
    
  for (int x=0;x<16;x++)
  {      
    for (int y=0;y<8;y++)
    {        
      for (int threeCol=0;threeCol<6*colourFlowDirection;threeCol++)
         changeColour();
         
      matrixItem = matrix[(y + shiftY) % 8] [(x + shiftX)%16];
      matrixItem = (invertMatrix*255)+(1-invertMatrix*2)*matrixItem;
      if (matrixItem != 0){
        ledIndex = 16*y+(y%2)*(2*x-15)+(15-x);
        matrixItem = matrixItem*Brightness/255/255;
        leds[ledIndex].r = matrixItem*R;
        leds[ledIndex].g = matrixItem*G;
        leds[ledIndex].b = matrixItem*B;
      } 
    }
  }
  FastSPI_LED.show();
  //delay(10);
}

void sweepMatrixHrz()
{
     if (++sweepCountDelay[0]>sweepSpeed[0]){
      sweepCountDelay[0]=0;
      if (++shiftX>=16)
        shiftX=0;
     }
     memset(leds, 0, NUM_LEDS * 3);
}
void sweepMatrixVrt()
{
     if (++sweepCountDelay[1]>sweepSpeed[1]){
      sweepCountDelay[1]=0;
      if (++shiftY>=8)
        shiftY=0;
     }
     memset(leds, 0, NUM_LEDS * 3);
}

void changeColour()
{
  if (tempR<256 - colourChange)
  {
    B -= colourChange;
    tempB = B;
    R += colourChange;
    tempR = R;
    tempG = 0;
  }else if(tempG<256 - colourChange)
  {
    R -= colourChange;
    G += colourChange;
    tempG = G;
  }else if(tempB<256 - colourChange)
  {
    G -= colourChange;
    B += colourChange;
    tempB=B; 
  }else if(tempB>=256 - colourChange)
  {
    tempR=0;
  } 
}


